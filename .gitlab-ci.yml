image: debian

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - test

# install libraries
before_script:
  - apt-get update
  - apt-get -y install clang cmake git libpcre2-dev libcmocka0 libcmocka-dev valgrind libnl-3-200 libnl-3-dev libnl-genl-3-dev libnl-nf-3-dev
  - apt-get -y install python3 python3-pip
  - git clone https://github.com/CESNET/libyang.git
  - git clone https://github.com/sysrepo/sysrepo.git
  - git clone https://github.com/telekom/sysrepo-plugins-common.git
  - cd libyang; git checkout devel; mkdir build; cd build; cmake .. -DCMAKE_C_COMPILER=clang; make -j install; cd ../../
  - cd sysrepo; git checkout devel; mkdir build; cd build; cmake .. -DCMAKE_C_COMPILER=clang; make -j install; cd ../../
  - cd sysrepo-plugins-common; git submodule init; git submodule update; mkdir build; cd build; cmake .. -DCMAKE_C_COMPILER=clang; make -j install; cd ../..
  - pip3 install libyang
  - pip3 install Jinja2

build:default:
  stage: build

  script:
    - mkdir build
    - cmake -DCMAKE_C_COMPILER=clang -DENABLE_BUILD_TESTS=ON -S . -B build/
    - cmake --build build/
  
  artifacts:
    paths:
      - build/

build:sanitized:
  stage: build

  script:
    - mkdir build-sanitized
    - cmake -S . -B build-sanitized/ -DCMAKE_C_COMPILER=clang -DENABLE_BUILD_TESTS=ON -DCMAKE_C_FLAGS=\"-fsanitize=address,undefined\"
    - cmake --build build-sanitized/
  artifacts:
    paths:
      - build-sanitized/

build:sanitized_memory:
  stage: build

  script:
    - mkdir build-sanitized-memory
    - cmake -S . -B build-sanitized-memory/ -DCMAKE_C_COMPILER=clang -DENABLE_BUILD_TESTS=ON -DCMAKE_C_FLAGS=\"-fsanitize=memory\"
    - cmake --build build-sanitized-memory/
  artifacts:
    paths:
      - build-sanitized-memory/

test:default:
  stage: test
  needs: ["build:default"]
  script:
    - cd build
    - ctest -V
  artifacts:
    paths:
      - build/

test:sanitized:
  stage: test
  needs: ["build:sanitized"]
  script:
    - cd build-sanitized
    - ctest -V
  artifacts:
    paths:
      - build-sanitized/

test:sanitized_memory:
  stage: test
  needs: ["build:sanitized_memory"]
  script:
    - cd build-sanitized-memory
    - ctest -V
  artifacts:
    paths:
      - build-sanitized-memory/